
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth core models
model User {
  id             String        @id @default(cuid())
  name           String?
  email          String?       @unique
  emailVerified  DateTime?
  image          String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  accounts       Account[]
  sessions       Session[]
  mediaStatuses  MediaStatus[]

  
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Domain models
enum MediaType {
  MOVIE
  SERIES
  BOOK
}

enum WatchStatus {
  PLANNING
  IN_PROGRESS
  COMPLETED
  DROPPED
  PAUSED
}

enum LibraryStatus {
  WISHLIST
  WATCHING
  COMPLETED
  DROPPED
  PAUSED
}

model Media {
  id           String         @id @default(cuid())
  type         MediaType
  title        String
  description  String?
  year         Int?
  externalId   String?        @unique 
  posterUrl    String?
  imdbRating   Float?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  seriesDetails SeriesDetails?
  movieDetails  MovieDetails?
  bookDetails   BookDetails?

  statuses     MediaStatus[]
  sourceMeta   SourceMeta[]

  @@index([type, title])
}

model SeriesDetails {
  id       String @id @default(cuid())
  mediaId  String @unique
  episodes Int?
  seasons  Int?

  media Media @relation(fields: [mediaId], references: [id], onDelete: Cascade)
}

model MovieDetails {
  id            String @id @default(cuid())
  mediaId       String @unique
  runtimeMinutes Int?
  director      String?

  media Media @relation(fields: [mediaId], references: [id], onDelete: Cascade)
}

model BookDetails {
  id       String @id @default(cuid())
  mediaId  String @unique
  author   String?
  pages    Int?

  media Media @relation(fields: [mediaId], references: [id], onDelete: Cascade)
}

model MediaStatus {
  id        String      @id @default(cuid())
  userId    String
  mediaId   String
  status    LibraryStatus
  rating    Int?
  progress  Int?
  currentSeason Int?    // For series
  currentEpisode Int?   // For series
  currentPage Int?      // For books
  totalPages Int?       // For books
  notes     String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  media Media @relation(fields: [mediaId], references: [id], onDelete: Cascade)

  @@unique([userId, mediaId])
  @@index([status])
}

// Cache for external API data
model SourceMeta {
  id          String   @id @default(cuid())
  source      String   // 'omdb', 'tmdb', etc.
  externalId  String   // External API ID
  data        Json     // Cached API response
  lastFetched DateTime @default(now())
  expiresAt   DateTime

  media Media @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  mediaId String

  @@unique([source, externalId])
  @@index([expiresAt])
}
